buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
	    classpath 'org.parchmentmc:librarian:1.+'
		classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "${minecraft_version}-${mod_version}"
group = "${mod_base_package}.${mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = jar_name

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users in 1.18+ instead of Java 16 in 1.17 or lower, so your mod should target Java 16.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: mappings_channel, version: mappings_version

    // makeObfSourceJar = false // A SRG-named sources jar is made by default. Uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations. These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            /* Recommended logging data for a userdev environment
               The markers can be changed as needed.
               "SCAN": For mods scan.
               "REGISTRIES": For firing of registry events.
               "REGISTRYDUMP": For getting the contents of all registries.
            */
            property 'forge.logging.markers', 'REGISTRIES'

            /* Recommended logging level for the console
               You can set various levels here.
               Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            */
            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            /* This allows for optional authentication with Mojang servers
               If you want to authenticate, put these properties in GRADLE_HOME/gradle.properties
            */
            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                args '--accessToken', project.getProperty('mc_accessToken')
            }

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Export mixin-changed classes
            property 'mixin.debug.export', 'true'

            // Add mixin config to runtime
            args '-mixin.config=' + project.getProperty('mod_id') + '.mixins.json'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

repositories {

}

dependencies {
  
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // Mixin annotation processor - generates the refmap
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    
}

/* IntelliJ Project Import
 * The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
 * Thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
 */
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}


def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                   mod_authors: mod_authors, credits:credits, mod_description: mod_description,
                   display_url:display_url, logo_file:logo_file,
                   issue_tracker_url: issue_tracker_url,
                   update_json_url: update_json_url,
                   license: license,
                   forge_version_range: forge_version_range, minecraft_version_range: minecraft_version_range,
                   loader_version_range: loader_version_range]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1.0.0", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${mod_id}.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing:
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}